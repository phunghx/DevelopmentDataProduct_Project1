p1 <- predict(fit2, newdata , interval = ("prediction"))
p1
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit2 <- lm(y ~ x)
newdata <- data.frame(x=mean(x))
p1 <- predict(fit2, newdata , interval = ("prediction"))
p1
p1 <- predict(fit2, newdata , interval = ("confidence"))
p1
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
#Get confident interval with 95%
fit2 <- lm(y ~ x)
sumCoef <- summary(fit2)$coefficients
?mtcars
y(0)
y(1)
y[1]
y[0]
y[2]
max(y)
max(x)
min(x)
newdata <- data.frame(x=3)
p1 <- predict(fit2, newdata , interval = ("prediction"))
p1
newdata <- data.frame(x=mean(x))
p1 <- predict(fit2, newdata , interval = ("confidence"))
p1
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
beta1 <- beta1 * 2
e <- y - beta0 - beta1 * (x /2)
n = length(y)
sigma <- sqrt(sum(e^2) / (n-2))
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
x <- x /2
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1 / seBeta1
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE)
coefTable <- rbind(c(beta0, seBeta0, tBeta0, pBeta0), c(beta1, seBeta1, tBeta1, pBeta1))
colnames(coefTable) <- c("Estimate", "Std. Error", "t value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x")
coefTable
x <- mtcars$wt
y <- mtcars$mpg
n = length(y)
x <- x /2
fit <- lm(y ~ x)
confint(fit)
summary(fit)$coefficients
x <- mtcars$wt
y <- mtcars$mpg
n = length(y)
fit2 <- lm(y ~ x)
sumCoef <- summary(fit2)$coefficients
sumCoef
x <- mtcars$wt
y <- mtcars$mpg
n = length(y)
fit9 <- lm( y ~ x)
fit9
beta0 <- fit9$coefficients[1]
beta1 <- fit9$coefficients[2]
L1 <- sum(((beta0 + beta1 * x)- y)^2)
L2 <- sum(((beta0 + 0 * x)- y)^2)
L1/l2
L1/L2
L2/L1
L1 <- sum(((beta0 + beta1 * x)- y)^2)
L2 <- sum(((beta0 + 0 * x)- y)^2)
L1/L2
L2 <- sum(((mean(y) + 0 * x)- y)^2)
L1/L2
sessionInfo()
pvals <- seq(0,1,length=1000)
plot(pvals, dbinom(3,4,pvals)/dbinom(3,4,3/4), type="l",
frame=FALSE,lwd=3)
lambda <- seq(0,0.2, length=1000)
likelihood <- dpois(5,94 * lambda) / dpois(5,5)
plot(lambda, likelihood, frame=FALSE,
lwd=3,type="l", xlab = expression(lambda))
lines(reps(5/94,2), 0:1, col="red",lwd=3)
lines(range(lamda[likelihood > 1/16]),rep(1/16,2),lwd=2)
lines(range(lamda[likelihood > 1/8]),rep(1/8,2),lwd=2)
lambda <- seq(0,0.2, length=1000)
likelihood <- dpois(5,94 * lambda) / dpois(5,5)
plot(lambda, likelihood, frame=FALSE,
lwd=3,type="l", xlab = expression(lambda))
lines(reps(5/94,2), 0:1, col="red",lwd=3)
lines(range(lambda[likelihood > 1/16]),rep(1/16,2),lwd=2)
lines(range(lambda[likelihood > 1/8]),rep(1/8,2),lwd=2)
lambda <- seq(0,0.2, length=1000)
likelihood <- dpois(5,94 * lambda) / dpois(5,5)
plot(lambda, likelihood, frame=FALSE,
lwd=3,type="l", xlab = expression(lambda))
lines(rep(5/94,2), 0:1, col="red",lwd=3)
lines(range(lambda[likelihood > 1/16]),rep(1/16,2),lwd=2)
lines(range(lambda[likelihood > 1/8]),rep(1/8,2),lwd=2)
library(manipulate)
pvals <- seq(0.01,0.99, length=1000)
manipulate(
plot(pvals, dbeta(pvals,alpha,beta),type="l",lwd=3, frame=FALSE),
alpha = slider(0.01,10, initial=1,step=0.5),
beta = slider(0.01,10, initial=1,step=0.5)
)
pvals <- seq(0.01,0.99, length=1000)
x <13; n <- 20;
myPlot <- function (alpha, beta) {
plot(0:1,0:1, type="n", xlab = "p", ylab="",
frame= FALSE)
lines(pvals, dbeta(pvals,alpha,beta)/ max(dbeta(pvals, alpha, beta)), lwd=3,col="darkred")
lines(pvals, dbinom(x,npvals)/ dbinom(x,n,x/n), lwd=3, col="darkblue")
lines(pvals, dbeta(pvals, alpha+x, beta+(n-x))/ max(dbeta(pvals, alpha + x, beta+(n-x))),
lwd=3, col="darkgreen")
title("red=prior, green=posterior, blue=likelihood")
}
manipulate(
myPlot(alpha, beta),
alpha= slider(0.01,10, initial=1, step=.5),
alpha= slider(0.01,10, initial=1, step=.5)
)
pvals <- seq(0.01,0.99, length=1000)
x <13; n <- 20;
myPlot <- function (alpha, beta) {
plot(0:1,0:1, type="n", xlab = "p", ylab="",
frame= FALSE)
lines(pvals, dbeta(pvals,alpha,beta)/ max(dbeta(pvals, alpha, beta)), lwd=3,col="darkred")
lines(pvals, dbinom(x,npvals)/ dbinom(x,n,x/n), lwd=3, col="darkblue")
lines(pvals, dbeta(pvals, alpha+x, beta+(n-x))/ max(dbeta(pvals, alpha + x, beta+(n-x))),
lwd=3, col="darkgreen")
title("red=prior, green=posterior, blue=likelihood")
}
manipulate(
myPlot(alpha, beta),
alpha= slider(0.01,10, initial=1, step=.5),
beta= slider(0.01,10, initial=1, step=.5)
)
pvals <- seq(0.01,0.99, length=1000)
x <- 13; n <- 20;
myPlot <- function (alpha, beta) {
plot(0:1,0:1, type="n", xlab = "p", ylab="",
frame= FALSE)
lines(pvals, dbeta(pvals,alpha,beta)/ max(dbeta(pvals, alpha, beta)), lwd=3,col="darkred")
lines(pvals, dbinom(x,npvals)/ dbinom(x,n,x/n), lwd=3, col="darkblue")
lines(pvals, dbeta(pvals, alpha+x, beta+(n-x))/ max(dbeta(pvals, alpha + x, beta+(n-x))),
lwd=3, col="darkgreen")
title("red=prior, green=posterior, blue=likelihood")
}
manipulate(
myPlot(alpha, beta),
alpha= slider(0.01,10, initial=1, step=.5),
beta= slider(0.01,10, initial=1, step=.5)
)
pvals <- seq(0.01,0.99, length=1000)
x <- 13; n <- 20;
myPlot <- function (alpha, beta) {
plot(0:1,0:1, type="n", xlab = "p", ylab="",
frame= FALSE)
lines(pvals, dbeta(pvals,alpha,beta)/ max(dbeta(pvals, alpha, beta)), lwd=3,col="darkred")
lines(pvals, dbinom(x,n,pvals)/ dbinom(x,n,x/n), lwd=3, col="darkblue")
lines(pvals, dbeta(pvals, alpha+x, beta+(n-x))/ max(dbeta(pvals, alpha + x, beta+(n-x))),
lwd=3, col="darkgreen")
title("red=prior, green=posterior, blue=likelihood")
}
manipulate(
myPlot(alpha, beta),
alpha= slider(0.01,10, initial=1, step=.5),
beta= slider(0.01,10, initial=1, step=.5)
)
#Getting HPD interval
library(binom)
install.packages('binom')
library(binom)
binom.bayes(13,20,type = "higest")
binom.bayes(13,20,type = "highest")
sp <- sqrt((7 * 15.34^2 + 20 * 18.23^2)/(8+21-2))
132.86-127.44 + c(-1,1) * qt(0.975,27) * sp * (1/8 * 1/21) ^.5
sp <- sqrt((7 * 15.34^2 + 20 * 18.23^2)/(8+21-2))
132.86-127.44 + c(-1,1) * qt(0.975,27) * sp * (1/8 * 1/21)^.5
sp <- sqrt((7 * 15.34^2 + 20 * 18.23^2)/(8+21-2))
132.86-127.44 + c(-1,1) * qt(0.975,27) * sp * (1/8 + 1/21)^.5
data(sleep)
x1 <- sleep$extra[sleep$group==1]
x2 <- sleep$extra[sleep$group==2]
n1 <- length(x1)
n2 <- length(x2)
sp <- sqrt(((n1-1)*sd(x1)^2 + (n2-1)*sd(x2)^2)/(n1+n2-2))
md <- mean(x1) - mean(x2)
semd <- sp * sqrt(1/ n1 + 1/n2)
md + c(-1,1) * qt(.975,n1 + n2-2) * semd
t.test(x1,x2, paired=FALSE, var.equal = =TRUE)$conf
t.test(x1,x2, paired=FALSE, var.equal =TRUE)$conf
library(UsingR)
data(father.son)
t.test(father.son$sheight - father.son$fheight)
1100 + c(-1,1) * qt(0.975,8) * 30
1100 + c(-1,1) * qt(0.975,9-1) * 30
library(manipulate)
mean = -2
n = 9
library(manipulate)
manipulate(
mean + c(-1,1) * qt(0.975,n-1) * sd),
sd = slider(0.3,5, initial=1, step=.1)
)
mean = -2
n = 9
library(manipulate)
manipulate(
mean + c(-1,1) * qt(0.975,n-1) * sd,
sd = slider(0.3,5, initial=1, step=.1)
)
mean = -2
n = 9
library(manipulate)
manipulate(
plot(mean + c(-1,1) * qt(0.975,n-1) * sd),
sd = slider(0.3,5, initial=0.3, step=.1)
)
mean = -2
n = 9
library(manipulate)
manipulate(
plot(mean + 1 * qt(0.975,n-1) * sd),
sd = slider(0.3,5, initial=0.3, step=.1)
)
mean = -2
n = 9
sd = c(0.3,1.5,2.1,2.6)
mean + 1 * qt(0.975,n-1) * sd
mean = -2
n = 9
sd = c(0.3,1.5,2.1,2.6)
mean + c(-1,1) * qt(0.975,n-1) * sd
sd = 0.3
mean + c(-1,1) * qt(0.975,n-1) * sd
sd = 1.5
mean + c(-1,1) * qt(0.975,n-1) * sd
sd = 2.1
mean + c(-1,1) * qt(0.975,n-1) * sd
sd = 2.6
mean + c(-1,1) * qt(0.975,n-1) * sd
n1 <- 10
n2 <- 10
x1 <- 3
sd1 <- 0.6
x2 <- 5
sd2 <- 0.68
sp <- sqrt(((n1-1)*sd1^2 + (n2-1)*sd2^2)/(n1+n2-2))
md <- x1 - x2
semd <- sp * sqrt(1/ n1 + 1/n2)
md + c(-1,1) * qt(.975,n1 + n2-2) * semd
n1 <- 10
n2 <- 10
x1 <- 3
sd1 <- 0.6
x2 <- 5
sd2 <- 0.68
sp <- sqrt(((n1-1)*sd1^2 + (n2-1)*sd2^2)/(n1+n2-2))
md <- x1 - x2
semd <- sp * sqrt(1/ n1 + 1/n2)
md + c(-1,1) * qt(.975,n1 + n2-2) * semd
n1 <- 10
n2 <- 10
x1 <- 3
sd1 <- sqrt(0.6)
x2 <- 5
sd2 <- sqrt(0.68)
sp <- sqrt(((n1-1)*sd1^2 + (n2-1)*sd2^2)/(n1+n2-2))
md <- x1 - x2
semd <- sp * sqrt(1/ n1 + 1/n2)
md + c(-1,1) * qt(.975,n1 + n2-2) * semd
n1 <- 100
n2 <- 100
x1 <- 4
sd1 <- 0.5
x2 <- 6
sd2 <- 2
sp <- sqrt(((n1-1)*sd1^2 + (n2-1)*sd2^2)/(n1+n2-2))
md <- x1 - x2
semd <- sp * sqrt(1/ n1 + 1/n2)
md + c(-1,1) * qt(.975,n1 + n2-2) * semd
n1 <- 100
n2 <- 100
x1 <- 4
sd1 <- 0.5
x2 <- 6
sd2 <- 2
sp <- sqrt(((n1-1)*sd1^2 + (n2-1)*sd2^2)/(n1+n2-2))
md <- x2 - x1
semd <- sp * sqrt(1/ n1 + 1/n2)
md + c(-1,1) * qt(.975,n1 + n2-2) * semd
n1 <- 9
n2 <- 9
x1 <- -3
sd1 <- 1.5
x2 <- 1
sd2 <- 1.8
sp <- sqrt(((n1-1)*sd1^2 + (n2-1)*sd2^2)/(n1+n2-2))
md <- x2 - x1
semd <- sp * sqrt(1/ n1 + 1/n2)
md + c(-1,1) * qt(.95,n1 + n2-2) * semd
1100 + c(-1,1) * qt(0.975,9-1) * 30
1100 + c(-1,1) * qt(0.975,9-1) * 30 / 3
mean = -2
n = 9
sd = c(0.3,1.5,2.1,2.6)
sd = 2.6
mean + c(-1,1) * qt(0.975,n-1) * sd / sqrt(n)
sd = 0.3
mean + c(-1,1) * qt(0.975,n-1) * sd / sqrt(n)
sd = 1.5
mean + c(-1,1) * qt(0.975,n-1) * sd / sqrt(n)
sd = 2.1
mean + c(-1,1) * qt(0.975,n-1) * sd / sqrt(n)
sd = 2.6
mean + c(-1,1) * qt(0.975,n-1) * sd / sqrt(n)
n1 <- 9
n2 <- 9
x1 <- -3
sd1 <- 1.5
x2 <- 1
sd2 <- 1.8
sp <- sqrt(((n1-1)*sd1^2 + (n2-1)*sd2^2)/(n1+n2-2))
md <- x2 - x1
semd <- sp * sqrt(1/ n1 + 1/n2)
md + c(-1,1) * qt(.95,n1 + n2-2) * semd
n1 <- 9
n2 <- 9
x1 <- -3
sd1 <- 1.5
x2 <- 1
sd2 <- 1.8
sp <- sqrt(((n1-1)*sd1^2 + (n2-1)*sd2^2)/(n1+n2-2))
md <- x1 - x2
semd <- sp * sqrt(1/ n1 + 1/n2)
md + c(-1,1) * qt(.95,n1 + n2-2) * semd
library(datasets)
data(swiss)
require(stats)
require(graphics)
pairs(swiss, panel = panel.smooth, main="Swiss data",
col = 3 + (swiss$Catholic >50))
summary(lm(Fertility ~ ., data = swiss))
download.file("http://apps.who.int/gho/athena/data/GHO/WHOSIS_000008.csv?profile=text&filter=COUNTRY:;SEX:")
download.file("http://apps.who.int/gho/athena/data/GHO/WHOSIS_000008.csv?profile=text&filter=COUNTRY:*;SEX:*")
download.file("http://apps.who.int/gho/athena/data/GHO/WHOSIS_000008.csv?profile=text&filter=COUNTRY:*;SEX:*","hunger.csv")
hunger <- read.csv('hunger.csv')
hunger <- hunger[hunger$Sex != "Both sexes",]
head(hunger)
lm1 <- lm(hunger$Numeric ~ hunger$Year)
plot(hunger$Year, hunger$Numeric, pch=19,col="blue")
lines(hunger$Year, lm1$fitted, lwd=3)
plot(hunger$Year, hunger$Numeric, pch=19,col="blue", frame=FALSE)
plot(hunger$Year, hunger$Numeric, col(hunger$Sex))
plot(hunger$Year, hunger$Numeric, col=(hunger$Sex))
plot(hunger$Year, hunger$Numeric, col=(hunger$Sex), pch=19)
lmM <- lm(hunger$Numeric[hunger$Sex="Male"] ~ hunger$Year[hunger$Sex="Male"])
lmF <- lm(hunger$Numeric[hunger$Sex="Female"] ~ hunger$Year[hunger$Sex="Female"])
lmM <- lm(hunger$Numeric[hunger$Sex="Male"] ~ hunger$Year[hunger$Sex=="Male"])
lmM <- lm(hunger$Numeric[hunger$Sex=="Male"] ~ hunger$Year[hunger$Sex=="Male"])
lmF <- lm(hunger$Numeric[hunger$Sex=="Female"] ~ hunger$Year[hunger$Sex=="Female"])
plot(hunger$Year, hunger$Numeric,pch=19)
points(hunger$Year, hunger$Numeric,pch=19, col=((hunger$Sex=="Male")*1 + 1))
lines(hunger$Year[hunger$Sex=="Male"],lmM$fitted, col="black",lwd=3)
lines(hunger$Year[hunger$Sex=="Female"],lmF$fitted, col="red",lwd=3)
lines(hunger$Year[hunger$Sex=="Female"],lmF$fitted, col="red",lwd=3)
lm(formula = hunger$Numeric ~ hunger$Year + hunger$Sex + hunger$Sex * hunger$Year)
View(hunger)
data(mtcars)
lm(mpg ~ cyl + wt, data=mtcars)
lm1 <- lm(mpg ~ cyl + wt, data=mtcars)
summary(lm1)
summary(mtcars$cyl)
str(mtcars$cyl)
mtcars <- transform(mtcars, cyl = factor(cyl))
str(mtcars$cyl)
lm1 <- lm(mpg ~ cyl + wt, data=mtcars)
summary(lm1)
lm1 <- lm(mpg ~ cyl , data=mtcars)
summary(lm1)
lm1 <- lm(mpg ~ cyl + wt -1, data=mtcars)
summary(lm1)
lm1 <- lm(mpg ~ cyl + wt -1, data=mtcars)
lm2 <- lm(mpg ~ cyl + wt , data=mtcars)
anova(lm1,lm2)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm( y ~ x)
round(hatvalues(fit)[1:5],3)
round(hatvalues(fit)[1:5],6)
round(dfbetas(fit)[1:10,2],4)
round(dfbetas(fit)[1:5,2],4)
?mtcars
install.packages("swirl")
library(swirl)
swirl()
swirl()
library(HistData)
data(GaltonFamilies)
summary(GaltonFamilies)
head(GaltonFamilies)
plot(x=GaltonFamilies$midparentHeight, y=GaltonFamilies$childHeight)
library(ggplot2)
qplot(x=midparentHeight, y = childHeight, data=GaltonFamilies) +
facet_grid(~gender)
with(GaltonFamilies, table(children))
library(caret)
GaltonFamilies <- GaltonFamilies[,-1]
head(GaltonFamilies)
set.seed(123)
inTrain <- createDataPartition(y=GaltonFamilies$childHeight,p=0.85, list=FALSE)
training <- GaltonFamilies[inTrain,]
testing <- GaltonFamilies[-inTrain,]
modFit <- train(childHeight ~ ., data= training, method = "rf", prox=TRUE)
summary(modFit)
confusionMatrix(testing$childHeight, predict(modFit,testing))
predict(modFit,testing)
testing$childHeight
GaltonFamilies <- GaltonFamilies[,-3]
head(GaltonFamilies)
set.seed(123)
inTrain <- createDataPartition(y=GaltonFamilies$childHeight,p=0.85, list=FALSE)
training <- GaltonFamilies[inTrain,]
testing <- GaltonFamilies[-inTrain,]
modFit <- train(childHeight ~ ., data= training, method = "rf", prox=TRUE)
predict(modFit, data.frame(father=77,mother=70,children=3,childNum=1,gender="male"))
predict(modFit, data.frame(father=77,mother=60,children=3,childNum=1,gender="male"))
predict(modFit, data.frame(father=77,mother=50,children=3,childNum=1,gender="male"))
predict(modFit, data.frame(father=70,mother=50,children=3,childNum=1,gender="male"))
predict(modFit, data.frame(father=70,mother=50,children=1,childNum=1,gender="male"))
predict(modFit, data.frame(father=70,mother=50,children=1,childNum=1,gender="female"))
predict(modFit, data.frame(father=30,mother=50,children=1,childNum=1,gender="female"))
predict(modFit, data.frame(father=30,mother=30,children=1,childNum=1,gender="female"))
confusionMatrix(testing$childHeight, predict(modFit,testing))
predict(modFit,testing)
testing$childHeight
save(modFit, file="ChildHeight.Rdata")
setwd("d:\\Coursera\\EDA\\shiny\\Project")
save(modFit, file="ChildHeight.Rdata")
modFit <- NULL
load("ChildHeight.Rdata")
?GaltonFamilies
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp('D:/Coursera/EDA/shiny/Project')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
